name: Deploy Contact Form Function

on:
  push:
    branches:
      - main
      - staging
    paths:
      - "functions/**"
  pull_request:
    branches:
      - main
      - staging
    paths:
      - "functions/**"

env:
  GCP_PROJECT_ID: static-sites-257923
  FUNCTION_NAME: contact-form
  FUNCTION_REGION: us-central1

jobs:
  test:
    name: Test Function
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        working-directory: functions

      - name: Run tests
        run: npm test
        working-directory: functions

      - name: Build TypeScript
        run: npm run build
        working-directory: functions

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    permissions:
      contents: read
      id-token: write
    environment:
      name: staging
      url: https://us-central1-static-sites-257923.cloudfunctions.net/contact-form

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build function
        run: npm run build
        working-directory: functions

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/789847666726/locations/global/workloadIdentityPools/github-actions/providers/github'
          service_account: 'github-actions-deployer@static-sites-257923.iam.gserviceaccount.com'

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Create deployment package
        run: |
          cd functions
          # Create a clean deployment directory
          mkdir -p deploy
          # Copy compiled JavaScript files
          cp -r dist/* deploy/
          # Copy package.json and modify it for deployment
          jq 'del(.scripts.build) | del(.scripts["gcp-build"]) | del(.scripts.dev) | del(.devDependencies) | .main = "index.js"' package.json > deploy/package.json
          # Copy package-lock.json if it exists
          cp package-lock.json deploy/ 2>/dev/null || true
          echo "Deployment package created successfully"
          ls -la deploy/

      - name: Deploy to Cloud Functions (Staging)
        run: |
          gcloud functions deploy ${{ env.FUNCTION_NAME }}-staging \
            --gen2 \
            --runtime=nodejs20 \
            --region=${{ env.FUNCTION_REGION }} \
            --source=functions/deploy \
            --entry-point=handleContactForm \
            --trigger-http \
            --allow-unauthenticated \
            --service-account=contact-form-runtime@static-sites-257923.iam.gserviceaccount.com \
            --build-service-account=projects/static-sites-257923/serviceAccounts/cloud-functions-builder@static-sites-257923.iam.gserviceaccount.com \
            --memory=256Mi \
            --timeout=60s \
            --max-instances=10 \
            --set-env-vars="NODE_ENV=staging,ENVIRONMENT=staging" \
            --set-secrets="MAILGUN_API_KEY=mailgun-api-key:latest,MAILGUN_DOMAIN=mailgun-domain:latest,FROM_EMAIL=from-email:latest,TO_EMAIL=to-email:latest,REPLY_TO_EMAIL=reply-to-email:latest" \
            --quiet

      - name: Verify deployment and run smoke test
        run: |
          echo "✅ Staging function deployed successfully"
          URL=$(gcloud functions describe ${{ env.FUNCTION_NAME }}-staging \
            --region=${{ env.FUNCTION_REGION }} \
            --format="value(serviceConfig.uri)")
          echo "Function URL: $URL"

          echo "Running smoke test (staging allows requests without App Check)..."
          RESPONSE=$(curl -X POST "$URL" \
            -H "Content-Type: application/json" \
            -d '{"name":"CI/CD Test","email":"test@example.com","message":"Automated deployment test","honeypot":""}' \
            -w "\nHTTP_CODE:%{http_code}" \
            -s)

          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE" | cut -d':' -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE/d')

          echo "Response: $BODY"
          echo "HTTP Status: $HTTP_CODE"

          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 503 ]; then
            echo "✅ Smoke test passed (function is responding)"
          else
            echo "❌ Unexpected status code: $HTTP_CODE"
            exit 1
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      id-token: write
    environment:
      name: production
      url: https://us-central1-static-sites-257923.cloudfunctions.net/contact-form

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build function
        run: npm run build
        working-directory: functions

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/789847666726/locations/global/workloadIdentityPools/github-actions/providers/github'
          service_account: 'github-actions-deployer@static-sites-257923.iam.gserviceaccount.com'

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Create deployment package
        run: |
          cd functions
          # Create a clean deployment directory
          mkdir -p deploy
          # Copy compiled JavaScript files
          cp -r dist/* deploy/
          # Copy package.json and modify it for deployment
          jq 'del(.scripts.build) | del(.scripts["gcp-build"]) | del(.scripts.dev) | del(.devDependencies) | .main = "index.js"' package.json > deploy/package.json
          # Copy package-lock.json if it exists
          cp package-lock.json deploy/ 2>/dev/null || true
          echo "Deployment package created successfully"
          ls -la deploy/

      - name: Deploy to Cloud Functions (Production)
        run: |
          gcloud functions deploy ${{ env.FUNCTION_NAME }} \
            --gen2 \
            --runtime=nodejs20 \
            --region=${{ env.FUNCTION_REGION }} \
            --source=functions/deploy \
            --entry-point=handleContactForm \
            --trigger-http \
            --allow-unauthenticated \
            --service-account=contact-form-runtime@static-sites-257923.iam.gserviceaccount.com \
            --build-service-account=projects/static-sites-257923/serviceAccounts/cloud-functions-builder@static-sites-257923.iam.gserviceaccount.com \
            --memory=512Mi \
            --timeout=60s \
            --max-instances=50 \
            --set-env-vars="NODE_ENV=production,ENVIRONMENT=production" \
            --set-secrets="MAILGUN_API_KEY=mailgun-api-key:latest,MAILGUN_DOMAIN=mailgun-domain:latest,FROM_EMAIL=from-email:latest,TO_EMAIL=to-email:latest,REPLY_TO_EMAIL=reply-to-email:latest" \
            --quiet

      - name: Verify deployment
        run: |
          echo "✅ Production function deployed successfully"
          gcloud functions describe ${{ env.FUNCTION_NAME }} \
            --region=${{ env.FUNCTION_REGION }} \
            --format="value(name,state,serviceConfig.uri)"
          echo "Note: Production function requires Firebase App Check token for security"
          echo "Integration testing should be done through the web app with valid tokens"

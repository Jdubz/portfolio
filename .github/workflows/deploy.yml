name: Deploy to Firebase

on:
  push:
    branches:
      - main
      - staging

permissions:
  contents: read

jobs:
  deploy:
    name: Build and Deploy (${{ github.ref_name }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: portfolio

      - name: Checkout shared-types
        uses: actions/checkout@v4
        with:
          repository: Jdubz/job-finder-shared-types
          path: shared-types
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            portfolio/package-lock.json
            portfolio/web/package-lock.json

      - name: Build shared-types package
        run: |
          npm ci
          npm run build
        working-directory: shared-types

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 make g++

      - name: Install root dependencies
        working-directory: portfolio
        run: |
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            if npm ci --prefer-offline --no-audit; then
              echo "✓ Dependencies installed successfully"
              break
            else
              if [ $attempt -eq $max_attempts ]; then
                echo "✗ Failed after $max_attempts attempts"
                exit 1
              fi
              echo "⚠ Installation failed, retrying in 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
        env:
          NPM_CONFIG_FETCH_RETRIES: 3
          NPM_CONFIG_FETCH_RETRY_MINTIMEOUT: 20000
          NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT: 120000

      - name: Install web dependencies
        working-directory: portfolio/web
        run: |
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            if npm ci --include=optional --legacy-peer-deps --prefer-offline --no-audit; then
              echo "✓ Dependencies installed successfully"
              break
            else
              if [ $attempt -eq $max_attempts ]; then
                echo "✗ Failed after $max_attempts attempts"
                exit 1
              fi
              echo "⚠ Installation failed, retrying in 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
        env:
          NPM_CONFIG_FETCH_RETRIES: 3
          NPM_CONFIG_FETCH_RETRY_MINTIMEOUT: 20000
          NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT: 120000

      - name: Install and verify @parcel/watcher
        working-directory: portfolio
        run: |
          echo "Installing @parcel/watcher with prebuilds..."
          npm install --no-save @parcel/watcher@2.5.1

          echo "Rebuilding native module..."
          npm rebuild @parcel/watcher --verbose

          echo "Verifying installation..."
          if [ ! -d "node_modules/@parcel/watcher" ]; then
            echo "ERROR: @parcel/watcher not installed"
            exit 1
          fi

          echo "Directory structure:"
          ls -la node_modules/@parcel/watcher/

          echo "Checking for native binding..."
          if [ -f "node_modules/@parcel/watcher/watcher.node" ]; then
            echo "✓ Native binding found: watcher.node"
            file node_modules/@parcel/watcher/watcher.node
          else
            echo "⚠ Native binding not found"
          fi

          echo "Checking prebuilds..."
          if [ -d "node_modules/@parcel/watcher/prebuilds" ]; then
            ls -la node_modules/@parcel/watcher/prebuilds/
          else
            echo "No prebuilds directory"
          fi

          echo "Testing require..."
          node -e "require('@parcel/watcher')" && echo "✓ Module loads successfully" || echo "✗ Module failed to load"

      - name: Clean Gatsby cache
        working-directory: portfolio/web
        run: npm run clean

      - name: Set build environment
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "GATSBY_ACTIVE_ENV=production" >> $GITHUB_ENV
            echo "NODE_OPTIONS=--max-old-space-size=8192" >> $GITHUB_ENV
          else
            echo "GATSBY_ACTIVE_ENV=staging" >> $GITHUB_ENV
            echo "NODE_OPTIONS=--max-old-space-size=6144" >> $GITHUB_ENV
            echo "GATSBY_EXPERIMENTAL_FAST_DEV=true" >> $GITHUB_ENV
          fi

      - name: Verify environment configuration
        working-directory: portfolio/web
        run: |
          echo "Building for environment: $GATSBY_ACTIVE_ENV"
          echo "Environment file:"
          cat .env.$GATSBY_ACTIVE_ENV
          echo ""

      - name: Build
        working-directory: portfolio/web
        run: npm run build

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: static-sites-257923
          channelId: live
          target: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
          entryPoint: portfolio

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      - name: Deploy Firestore Rules and Indexes
        working-directory: portfolio
        run: bash scripts/deploy-firestore-safe.sh

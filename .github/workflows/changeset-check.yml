name: Changeset Check (Auto-Generate)

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

permissions:
  contents: write
  pull-requests: write

jobs:
  changeset-check:
    name: Verify or Auto-Generate Changeset
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # Skip draft PRs and PRs with 'skip-changeset' label
    if: |
      github.event.pull_request.draft == false &&
      !contains(github.event.pull_request.labels.*.name, 'skip-changeset')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to compare changes
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files in this PR
          git fetch origin ${{ github.base_ref }}
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)

          # Check if any important files were changed
          important_changes=$(echo "$changed_files" | grep -E '^(web/src|functions/src|web/gatsby-|.*package\.json$)' || true)

          if [ -n "$important_changes" ]; then
            echo "has_important_changes=true" >> $GITHUB_OUTPUT

            # Format file list for comment
            echo "file_list<<EOF" >> $GITHUB_OUTPUT
            echo "$important_changes" | head -10 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            file_count=$(echo "$important_changes" | wc -l)
            echo "file_count=$file_count" >> $GITHUB_OUTPUT
          else
            echo "has_important_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for changeset files
        id: changeset-check
        run: |
          # Check if .changeset directory exists
          if [ ! -d ".changeset" ]; then
            echo "has_changeset=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Count changeset files (excluding README.md and config.json)
          changeset_count=$(find .changeset -name "*.md" ! -name "README.md" | wc -l)

          if [ "$changeset_count" -gt 0 ]; then
            echo "has_changeset=true" >> $GITHUB_OUTPUT
            echo "changeset_count=$changeset_count" >> $GITHUB_OUTPUT
          else
            echo "has_changeset=false" >> $GITHUB_OUTPUT
          fi

      - name: Auto-generate changeset if missing
        id: auto-generate
        if: |
          steps.changed-files.outputs.has_important_changes == 'true' &&
          steps.changeset-check.outputs.has_changeset == 'false'
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"

          # Determine which packages changed
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          has_web=false
          has_functions=false

          if echo "$changed_files" | grep -qE '^web/'; then
            has_web=true
          fi

          if echo "$changed_files" | grep -qE '^functions/'; then
            has_functions=true
          fi

          # Auto-detect change type (default to patch)
          if echo "$changed_files" | grep -qE 'package\.json|breaking|BREAKING'; then
            change_type="minor"
          else
            change_type="patch"
          fi

          # Create changeset file
          echo "---" > ".changeset/pr-$PR_NUMBER-auto.md"

          if [ "$has_web" = "true" ]; then
            echo "\"josh-wentworth-portfolio\": $change_type" >> ".changeset/pr-$PR_NUMBER-auto.md"
          fi

          if [ "$has_functions" = "true" ]; then
            echo "\"contact-form-function\": $change_type" >> ".changeset/pr-$PR_NUMBER-auto.md"
          fi

          echo "---" >> ".changeset/pr-$PR_NUMBER-auto.md"
          echo "" >> ".changeset/pr-$PR_NUMBER-auto.md"
          echo "$PR_TITLE" >> ".changeset/pr-$PR_NUMBER-auto.md"
          echo "" >> ".changeset/pr-$PR_NUMBER-auto.md"
          echo "Auto-generated changeset for PR #$PR_NUMBER" >> ".changeset/pr-$PR_NUMBER-auto.md"

          # Commit and push
          git add .changeset/
          git commit -m "chore: auto-generate changeset for PR #$PR_NUMBER"
          git push origin HEAD:${{ github.head_ref }}

          echo "generated=true" >> $GITHUB_OUTPUT
          echo "changeset_file=.changeset/pr-$PR_NUMBER-auto.md" >> $GITHUB_OUTPUT

      - name: Comment on PR - Auto-generated changeset
        if: steps.auto-generate.outputs.generated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## 🤖 Auto-Generated Changeset

            I've automatically created a changeset for this PR!

            **File**: \`${{ steps.auto-generate.outputs.changeset_file }}\`

            If you'd like to customize the changeset description, you can:
            1. Edit the file directly in your branch
            2. Or delete it and run \`npm run changeset\` manually for more control

            ---

            ✅ Changeset requirement satisfied!`;

            // Check if we already commented about changesets
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Changeset')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Comment on PR - Changeset found
        if: |
          steps.changeset-check.outputs.has_changeset == 'true' &&
          steps.auto-generate.outputs.generated != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const changesetCount = '${{ steps.changeset-check.outputs.changeset_count }}';

            const body = `## ✅ Changeset Detected

            Great! This PR includes **${changesetCount} changeset(s)**.

            Your changes will be included in the next release. 🚀

            ---

            Ready to merge once all other checks pass.`;

            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Changeset')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Summary
        run: |
          if [ "${{ steps.changed-files.outputs.has_important_changes }}" != "true" ]; then
            echo "✅ No important files changed - no changeset required"
            exit 0
          fi

          if [ "${{ steps.auto-generate.outputs.generated }}" == "true" ]; then
            echo "🤖 Auto-generated changeset for this PR"
            echo "📋 Changeset created: ${{ steps.auto-generate.outputs.changeset_file }}"
            echo "✅ Changeset requirement satisfied"
            echo "🚀 Ready to merge"
          elif [ "${{ steps.changeset-check.outputs.has_changeset }}" == "true" ]; then
            echo "✅ Changeset found!"
            echo "📋 This PR includes ${{ steps.changeset-check.outputs.changeset_count }} changeset(s)"
            echo "🚀 Ready to merge"
          else
            echo "⚠️ Unexpected state - no changeset found and auto-generation didn't run"
            echo "This should not happen. Please check the workflow logs."
            exit 1
          fi

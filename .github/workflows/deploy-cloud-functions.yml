name: Deploy Cloud Functions

on:
  push:
    branches:
      - main
      - staging
    paths:
      - "functions/**"
  pull_request:
    branches:
      - main
      - staging
    paths:
      - "functions/**"

env:
  GCP_PROJECT_ID: static-sites-257923
  FUNCTION_REGION: us-central1

jobs:
  test:
    name: Test Functions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        working-directory: functions

      - name: Run tests
        run: npm test
        working-directory: functions

      - name: Build TypeScript
        run: npm run build
        working-directory: functions

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    permissions:
      contents: read
      id-token: write
    environment:
      name: staging
      url: https://staging.joshwentworth.com

    strategy:
      matrix:
        function:
          - name: contact-form
            entry_point: handleContactForm
            runtime_service_account: contact-form-runtime@static-sites-257923.iam.gserviceaccount.com
            memory: 256Mi
            max_instances: 10
            secrets: MAILGUN_API_KEY=mailgun-api-key:latest,MAILGUN_DOMAIN=mailgun-domain:latest,FROM_EMAIL=from-email:latest,TO_EMAIL=to-email:latest,REPLY_TO_EMAIL=reply-to-email:latest
          - name: manageExperience
            entry_point: manageExperience
            runtime_service_account: 789847666726-compute@developer.gserviceaccount.com
            memory: 256Mi
            max_instances: 10
            secrets: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build function
        run: npm run build
        working-directory: functions

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/789847666726/locations/global/workloadIdentityPools/github-actions/providers/github'
          service_account: 'github-actions-deployer@static-sites-257923.iam.gserviceaccount.com'

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Create deployment package
        run: |
          cd functions
          mkdir -p deploy
          cp -r dist/* deploy/
          jq 'del(.scripts.build) | del(.scripts["gcp-build"]) | del(.scripts.dev) | del(.devDependencies) | .main = "index.js"' package.json > deploy/package.json
          cp package-lock.json deploy/ 2>/dev/null || true
          echo "Deployment package created for ${{ matrix.function.name }}"
          ls -la deploy/

      - name: Deploy ${{ matrix.function.name }} to Staging
        run: |
          DEPLOY_CMD="gcloud functions deploy ${{ matrix.function.name }}-staging \
            --gen2 \
            --runtime=nodejs20 \
            --region=${{ env.FUNCTION_REGION }} \
            --source=functions/deploy \
            --entry-point=${{ matrix.function.entry_point }} \
            --trigger-http \
            --allow-unauthenticated \
            --service-account=${{ matrix.function.runtime_service_account }} \
            --build-service-account=projects/static-sites-257923/serviceAccounts/cloud-functions-builder@static-sites-257923.iam.gserviceaccount.com \
            --memory=${{ matrix.function.memory }} \
            --timeout=60s \
            --max-instances=${{ matrix.function.max_instances }} \
            --set-env-vars=NODE_ENV=staging,ENVIRONMENT=staging"

          # Add secrets if they exist
          if [ -n "${{ matrix.function.secrets }}" ]; then
            DEPLOY_CMD="$DEPLOY_CMD --set-secrets=${{ matrix.function.secrets }}"
          fi

          DEPLOY_CMD="$DEPLOY_CMD --quiet"

          eval $DEPLOY_CMD

      - name: Verify ${{ matrix.function.name }} deployment
        run: |
          echo "✅ ${{ matrix.function.name }}-staging deployed successfully"
          gcloud functions describe ${{ matrix.function.name }}-staging \
            --region=${{ env.FUNCTION_REGION }} \
            --format="value(name,state,serviceConfig.uri)"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      id-token: write
    environment:
      name: production
      url: https://joshwentworth.com

    strategy:
      matrix:
        function:
          - name: contact-form
            entry_point: handleContactForm
            runtime_service_account: contact-form-runtime@static-sites-257923.iam.gserviceaccount.com
            memory: 512Mi
            max_instances: 50
            secrets: MAILGUN_API_KEY=mailgun-api-key:latest,MAILGUN_DOMAIN=mailgun-domain:latest,FROM_EMAIL=from-email:latest,TO_EMAIL=to-email:latest,REPLY_TO_EMAIL=reply-to-email:latest
          - name: manageExperience
            entry_point: manageExperience
            runtime_service_account: 789847666726-compute@developer.gserviceaccount.com
            memory: 256Mi
            max_instances: 10
            secrets: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build function
        run: npm run build
        working-directory: functions

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/789847666726/locations/global/workloadIdentityPools/github-actions/providers/github'
          service_account: 'github-actions-deployer@static-sites-257923.iam.gserviceaccount.com'

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Create deployment package
        run: |
          cd functions
          mkdir -p deploy
          cp -r dist/* deploy/
          jq 'del(.scripts.build) | del(.scripts["gcp-build"]) | del(.scripts.dev) | del(.devDependencies) | .main = "index.js"' package.json > deploy/package.json
          cp package-lock.json deploy/ 2>/dev/null || true
          echo "Deployment package created for ${{ matrix.function.name }}"
          ls -la deploy/

      - name: Deploy ${{ matrix.function.name }} to Production
        run: |
          DEPLOY_CMD="gcloud functions deploy ${{ matrix.function.name }} \
            --gen2 \
            --runtime=nodejs20 \
            --region=${{ env.FUNCTION_REGION }} \
            --source=functions/deploy \
            --entry-point=${{ matrix.function.entry_point }} \
            --trigger-http \
            --allow-unauthenticated \
            --service-account=${{ matrix.function.runtime_service_account }} \
            --build-service-account=projects/static-sites-257923/serviceAccounts/cloud-functions-builder@static-sites-257923.iam.gserviceaccount.com \
            --memory=${{ matrix.function.memory }} \
            --timeout=60s \
            --max-instances=${{ matrix.function.max_instances }} \
            --set-env-vars=NODE_ENV=production,ENVIRONMENT=production"

          # Add secrets if they exist
          if [ -n "${{ matrix.function.secrets }}" ]; then
            DEPLOY_CMD="$DEPLOY_CMD --set-secrets=${{ matrix.function.secrets }}"
          fi

          DEPLOY_CMD="$DEPLOY_CMD --quiet"

          eval $DEPLOY_CMD

      - name: Verify ${{ matrix.function.name }} deployment
        run: |
          echo "✅ ${{ matrix.function.name }} deployed successfully to production"
          gcloud functions describe ${{ matrix.function.name }} \
            --region=${{ env.FUNCTION_REGION }} \
            --format="value(name,state,serviceConfig.uri)"

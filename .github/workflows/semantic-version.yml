name: Semantic Version

on:
  push:
    branches:
      - main
      - staging

permissions:
  contents: write

jobs:
  version:
    name: Auto Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Check for version bump type
          if echo "$COMMIT_MSG" | grep -qiE "^(feat|feature)(\(.+\))?!:|BREAKING CHANGE:|^[a-z]+(\(.+\))?!:"; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "Detected BREAKING CHANGE - major version bump"
          elif echo "$COMMIT_MSG" | grep -qiE "^(feat|feature)(\(.+\))?:"; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "Detected feature - minor version bump"
          elif echo "$COMMIT_MSG" | grep -qiE "^(fix|bugfix|patch)(\(.+\))?:"; then
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "Detected fix - patch version bump"
          else
            echo "type=none" >> $GITHUB_OUTPUT
            echo "No semantic commit detected - skipping version bump"
          fi

      - name: Bump version
        if: steps.version.outputs.type != 'none'
        run: |
          TYPE="${{ steps.version.outputs.type }}"
          echo "Bumping $TYPE version..."

          # Bump version and capture the new version
          npm version $TYPE -m "chore: bump version to %s [skip ci]"

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"

          # Push the changes and tag
          git push origin ${{ github.ref_name }}
          git push origin --tags

      - name: Create release notes
        if: steps.version.outputs.type != 'none' && github.ref_name == 'main'
        run: |
          VERSION=$(node -p "require('./package.json').version")

          # Create release notes from recent commits
          cat > release-notes.md << EOF
          ## Changes in v$VERSION

          $(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD | grep -E "^- (feat|fix|perf|refactor|docs|style|test|chore)(\(.+\))?:")

          ---
          *Generated automatically by semantic-version workflow*
          EOF

          cat release-notes.md

      - name: Summary
        if: steps.version.outputs.type != 'none'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "## âœ… Version Updated to v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ steps.version.outputs.type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
